import structfrom . import data_packeddef parse_main(dm_data):    position = 0    shader_name, position = data_packed.parse_string(dm_data, position)    print('    Shader:', shader_name)    texture_name, position = data_packed.parse_string(dm_data, position)    print('    Texture:', texture_name)    flags, min_scale, max_scale, vertex_count, index_count = \    struct.unpack('iffii', dm_data[position : position + 20])    position += 20    print('    Flags:', flags)    print('    Scale Min = {}\n    Scale Max = {}'.format(min_scale, max_scale))    print('    Vertex count =', vertex_count)    print('    Index count =', index_count)    print('    Mesh:')        vertices = []    uvs = []    for vertex_id in range(vertex_count):        position_x, position_z, position_y, uv_x, uv_y = \        struct.unpack('5f', dm_data[position : position + 20])        position += 20        print('        Vertex{}: {:.4} {:.4} {:.4}'.format(        vertex_id, position_x, position_y, position_z))        print('        UV{}: {:.4} {:.4}\n'.format(vertex_id, uv_x, uv_y))        vertices.append((position_x, position_y, position_z))        uvs.append((uv_x, uv_y))        triangles = []    for index_id in range(index_count//3):        index_1, index_2, index_3 = \        struct.unpack('3h', dm_data[position : position + 6])        position += 6        print('        Triangle{}: {} {} {}'.format(        index_id, index_1, index_2, index_3))        triangles.append((index_1, index_2, index_3))    save = open('c:\\mesh.txt', 'w')    save.write(repr(vertices)+'\n')    save.write(repr(triangles)+'\n')    save.write(repr(uvs)+'\n')    save.close()    return vertices, uvs, triangles, texture_name  