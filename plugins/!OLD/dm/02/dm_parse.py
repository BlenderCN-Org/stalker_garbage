import structfrom . import data_packedfrom . import dm_propdef dump_create(shader_name,                texture_name,                flags,                min_scale,                max_scale,                vertex_count,                index_count,                position_x,                position_y,                position_z,                uv_x,                uv_y,                index_1,                index_2,                index_3):    dump_file = open(dm_prop.dump_path + dump_folder + 'DUMP_{}.txt'.format(dm_file_name))    print('    Shader:', shader_name, file = dump_file)    print('    Texture:', texture_name)    print('    Flags:', flags)    print('    Scale Min = {}\n    Scale Max = {}'.format(min_scale, max_scale))    print('    Vertex count =', vertex_count)    print('    Index count =', index_count)    print('    Mesh:')    for vertex_id in range(vertex_count):        print('        Vertex{}: {:.4} {:.4} {:.4}'.format(vertex_id, position_x, position_y, position_z))        print('        UV{}: {:.4} {:.4}\n'.format(vertex_id, uv_x, uv_y))    for index_id in range(index_count//3):        print('        Triangle{}: {} {} {}'.format(index_id, index_1, index_2, index_3))def parse_main(dm_data):    position = 0    shader_name, position = data_packed.parse_string(dm_data, position)    texture_name, position = data_packed.parse_string(dm_data, position)    flags, min_scale, max_scale, vertex_count, index_count = \    struct.unpack('iffii', dm_data[position : position + 20])    position += 20        vertices = []    uvs = []    for vertex_id in range(vertex_count):        position_x, position_z, position_y, uv_x, uv_y = \        struct.unpack('5f', dm_data[position : position + 20])        position += 20        vertices.append((position_x, position_y, position_z))        uvs.append((uv_x, uv_y))        triangles = []    for index_id in range(index_count//3):        index_1, index_2, index_3 = \        struct.unpack('3h', dm_data[position : position + 6])        position += 6        triangles.append((index_1, index_2, index_3))    save = open('c:\\mesh.txt', 'w')    save.write(repr(vertices)+'\n')    save.write(repr(triangles)+'\n')    save.write(repr(uvs)+'\n')    save.close()    if dm_prop.dump_save:        dump_create(shader_name,texture_name,flags,min_scale,max_scale,vertex_count,        index_count,position_x,position_y,position_z,uv_x,uv_y,index_1,index_2,index_3)    return vertices, uvs, triangles, texture_name